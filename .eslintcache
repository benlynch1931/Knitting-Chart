[{"/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/index.js":"1","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/reportWebVitals.js":"2","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/App.js":"3","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/LeftSideBar.component.js":"4","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Colours.component.js":"5","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Colours.Array.js":"6","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/contexts/GlobalContext.js":"7","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Grid.component.js":"8"},{"size":503,"mtime":1607971937441,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1607075822233,"results":"11","hashOfConfig":"10"},{"size":478,"mtime":1609020867331,"results":"12","hashOfConfig":"10"},{"size":1388,"mtime":1609018584051,"results":"13","hashOfConfig":"10"},{"size":4631,"mtime":1609246299246,"results":"14","hashOfConfig":"10"},{"size":770,"mtime":1609157659971,"results":"15","hashOfConfig":"10"},{"size":1102,"mtime":1609161281635,"results":"16","hashOfConfig":"10"},{"size":1619,"mtime":1609027388170,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"13y2099",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/index.js",[],["40","41"],"/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/reportWebVitals.js",[],"/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/App.js",["42","43"],"// import logo from './logo.svg';\nimport './App.css';\nimport LeftSideBar from './components/LeftSideBar.component'\nimport Grid from './components/Grid.component';\nimport GlobalContextProvider from './contexts/GlobalContext.js';\nimport GlobalContext from './contexts/GlobalContext.js';\nimport React, { useContext } from 'react'\n\nfunction App() {\n  return (\n    <GlobalContextProvider>\n      <LeftSideBar />\n      <Grid />\n    </GlobalContextProvider>\n  );\n}\n\nexport default App;\n","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/LeftSideBar.component.js",["44","45","46"],"import React, { Component, useContext } from 'react';\nimport '../styles/LeftSideBar.css';\nimport ColourComponent from './Colours.component'\nimport { GlobalContext } from '../contexts/GlobalContext.js'\n\n\n\nconst LeftSideBar = () => {\n\n  const { stiches, rows, changeStitches, changeRows } = useContext(GlobalContext)\n\n\n    return (\n      <div className='left-side-bar'>\n        <div className='chart-form div'>\n          <form id='generate-chart' onSubmit={(event) => {event.preventDefault(); changeStitches(event.target.stitches.value); changeRows(event.target.rows.value); }}>\n            <table className='chart-form table'>\n              <tbody>\n                <tr className='form-control'>\n                  <td className='form-control label'><label>Rows</label></td>\n                  <td><input type='text' name='rows'/></td>\n                </tr>\n                <tr className='form-control'>\n                  <td className='form-control label'><label>Stitches</label></td>\n                  <td><input type='text' name='stitches' /></td>\n                </tr>\n                <tr>\n                  <td colSpan='2' className='generate-chart table submit'><button type='submit'>Generate</button></td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n        </div>\n        <ColourComponent />\n      </div>\n\n    )\n\n}\n\nexport default LeftSideBar;\n","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Colours.component.js",["47","48","49","50","51","52"],"/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Colours.Array.js",["53","54"],"import React, { useContext } from 'react';\n\nimport { GlobalContext } from '../contexts/GlobalContext.js'\n\nconst Colours = () => {\n\n  const { colours, updateColours } = useContext(GlobalContext)\n\n  const add = (addColour) => {\n    if (addColour.includes('#')) {\n      addColour = addColour\n    } else {\n      addColour = `#${addColour}`\n    }\n    const viewLastElement = colours[colours.length-1]\n    if (viewLastElement[1] == null) {\n      const editLastElement = viewLastElement\n      const [...fullColours] = colours\n      fullColours.pop()\n      editLastElement[1] = addColour\n      updateColours([...fullColours, editLastElement])\n    } else {\n      updateColours([...colours, [addColour, null]])\n    }\n  }\n  \n\n  return {\n    add: add\n  }\n}\n\nexport default Colours;\n","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/contexts/GlobalContext.js",["55"],"import React, { createContext, Component } from 'react';\nimport Colours from '../components/Colours.Array'\n\nexport const GlobalContext = createContext();\n\nclass GlobalContextProvider extends Component {\n  state = {\n    stitches: null,\n    rows: null,\n    colourPick: \"#FFFFFF\",\n    // colours: [['#000000', '#FF0000'], ['#FFFFFF', '#00FF00'], ['#0000FF', '#FFFF00']]\n    colours: []\n  }\n\n  changeStitches = (newSize) => {\n    this.setState({ stitches: newSize})\n  }\n\n  changeRows = (newSize) => {\n    this.setState({ rows: newSize })\n  }\n\n  changeColourPick = (newColour) => {\n    this.setState({ colourPick: newColour})\n  }\n\n  updateColours = (newColoursArray) => {\n    this.setState({colours: newColoursArray})\n  }\n\n\n\n  render() {\n    return (\n      <GlobalContext.Provider value={{\n        ...this.state,\n        changeStitches: this.changeStitches,\n        changeColourPick: this.changeColourPick,\n        updateColours: this.updateColours,\n        changeRows: this.changeRows\n      }}>\n      {this.props.children}\n      </GlobalContext.Provider>\n    )\n  }\n}\n\nexport default GlobalContextProvider;\n","/Users/ben/Desktop/IT Portfolio/JavaScript-Projects/Knitting-Chart/src/components/Grid.component.js",["56"],"import React, { Component, useContext, useState } from 'react';\nimport { GlobalContext } from '../contexts/GlobalContext.js';\n\nimport '../styles/Grid.css';\n\nconst Grid = () => {\n  const { stitches, rows, colourPick } = useContext(GlobalContext)\n  // const [colour, setColour] = useState('#FFFFFF')\n  const [selectedCells, setSelectedCells] = useState({})\n  const currentSelectedCells = selectedCells\n\n\n  const renderGrid = () => {\n    let jsx = []\n    for(let i=0; i<rows;i++) {\n      jsx.push(\n        <tr>\n          {renderStitches(i+1)}\n        </tr>\n      )\n    }\n    return jsx\n  }\n\n\n\n  const renderStitches = (rowNo) => {\n\n    const stitchJSX = []\n    // const dimensions = 400 * ((100 / stitches) / 100);\n\n    for(let y=0; y < stitches; y++) {\n      const id = `${rowNo}_${y+1}`\n      let styling;\n      if (id in selectedCells) {\n        styling = {\n          width: 30,\n          height: 30,\n          backgroundColor: selectedCells.[id]\n        }\n      } else {\n        styling = {\n          width: 30,\n          height: 30,\n          backgroundColor: '#FFFFFF'\n        }\n      }\n      stitchJSX.push(<td><div className='stitch' id={id} style={styling} onClick={(event) => { event.preventDefault(); setSelectedCells({...currentSelectedCells, [id]: colourPick }) }}></div></td>)\n    }\n    return stitchJSX\n  }\n\n\n  if (stitches == null || rows == null) {\n    return (\n      <div className='grid'>\n\n      </div>\n    )\n  } else {\n    return (\n      <div className='grid'>\n        <table>\n          <tbody>\n          {renderGrid()}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default Grid\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":6,"column":8,"nodeType":"63","messageId":"64","endLine":6,"endColumn":21},{"ruleId":"61","severity":1,"message":"65","line":7,"column":17,"nodeType":"63","messageId":"64","endLine":7,"endColumn":27},{"ruleId":"61","severity":1,"message":"66","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"61","severity":1,"message":"67","line":10,"column":11,"nodeType":"63","messageId":"64","endLine":10,"endColumn":18},{"ruleId":"61","severity":1,"message":"68","line":10,"column":20,"nodeType":"63","messageId":"64","endLine":10,"endColumn":24},{"ruleId":"61","severity":1,"message":"66","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},{"ruleId":"61","severity":1,"message":"69","line":8,"column":11,"nodeType":"63","messageId":"64","endLine":8,"endColumn":26},{"ruleId":"70","severity":1,"message":"71","line":31,"column":21,"nodeType":"72","messageId":"73","endLine":31,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":37,"column":21,"nodeType":"72","messageId":"73","endLine":37,"endColumn":23},{"ruleId":"70","severity":1,"message":"71","line":39,"column":28,"nodeType":"72","messageId":"73","endLine":39,"endColumn":30},{"ruleId":"74","severity":1,"message":"75","line":71,"column":8,"nodeType":"76","endLine":71,"endColumn":10,"suggestions":"77"},{"ruleId":"61","severity":1,"message":"78","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":13},{"ruleId":"79","severity":1,"message":"80","line":11,"column":19,"nodeType":"63","messageId":"81","endLine":11,"endColumn":28},{"ruleId":"61","severity":1,"message":"82","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":15},{"ruleId":"61","severity":1,"message":"66","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":26},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'GlobalContext' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'Component' is defined but never used.","'stiches' is assigned a value but never used.","'rows' is assigned a value but never used.","'coloursFunction' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatColours'. Either include it or remove the dependency array.","ArrayExpression",["85"],"'React' is defined but never used.","no-self-assign","'addColour' is assigned to itself.","selfAssignment","'Colours' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [formatColours]",{"range":"88","text":"89"},[3165,3167],"[formatColours]"]